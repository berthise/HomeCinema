Document de conception système


--------------------------------
Desciption Global
--------------------------------

Notre application de e-comerce basé sur la technologie J2EE est une
architecture multitier.  D'une manière toute a fait classique, nous
retrouvaons tout en bas la base de donnée. Elle est utilisé par la couche
modèle, module que nous avons appelé HomeCinema-ejbs. Au dessus ce trouve la
couche logique, coeur de notre application: les managed bean. Nous avons fait
le choix d'avoir deux wars différents, un pour les clients, l'autre pour
l'administration.  Enfin, tout en haut de cette pile ce trouve les clients,
ici des navigateur web.

global.dia

Nous avons fait le choix de mettre les parties commune entre les wars et les
ejbs dans une bibliotheque. Cette dernière comprend des Data transfere object,
et les interfaces des ejbs.  De cette manière, les war et les ejbs peuvent
tourner sur des serveur J2EE différents. Il nous est aussi possible de d'avoir
une application "lourde" qui utilise directement les ejbs, afin par exemple de
remplir notre base de donnée. Cette derniere est utilisé par les ejbs grace à
un ORM, ici EclipseLink.

global_candc.dia


--------------------------------
Entités
--------------------------------

Nous avons des produits, qui contienent au moins un film. Ces derniers on un
produit principale, mais peut aussi appartenir à d'autre, comme des packs.
Les films composés avec des fichiers videos: une bande annonce et au moins un
fichier video du films. Ils ont des acteurs et des réalisateur que nous
connaissons commer Personne. Chaque personne peut avoir realisé ou joué dans
un ou plusieurs films.

Les utilisateur du site sont enregistré dans user. Ils onts un caddie qui est
une liste de produit. Une fois le paiement valider, la caddie est transformé
en transaction est sauvegardé. L'utilisateur a une liste de films comprenant
des donné spécifique à chaque utilisateur, comme l'état du visionnage d'un
film.

Lors de la creation d'un utilisateur, un code est généré est stocké dans
UserActivation. L'utilsateur sera activé si ce dernier active son compte grace
au code. De la meme manière, un utilisateur peut récuperer son mot de passe.

diagramme_de_classe.dia


---------------------------------------
Gestion du caddie
---------------------------------------

L'ajout d'un film au caddie se fait par la page de sa fiche lors que
l'utilisateur est connecté. Une fois le film ajouter, il est possible de le
supprimer toujour à partir de la page fiche film. La modification du caddie
est aussi possible a partir de la page mon caddie où il est possible d'y
supprimer un produit, et de valider le caddie pour passer au paiement.

Cette fonctionnalité utilise deux ManagedBean: CaddieManagedBean et
SessionManagedBean.

Le premier, en RequestScoped, contient les opérations à éffectuer sur le caddie,
telle que lister les produits, ajouter un produit et supprimer un produit. Il
utilise l'EJB ManagedTransation pour modifier le caddie et l'EJB
ManagedProduct afin de recupere la liste des produit du caddie. Les entités
sont convertie en CaddieDto qui contient des ProductDTO.
Le second en SessionScoped, maintient un état du caddie de l'utilisateur
afin de facilité sont accés. Ce dernier utilise l'EJB ManagedTransaction.


----------------------------------------
Validation du caddie/paiement
----------------------------------------

Une fois le caddie complété, sur la page mon caddie, l'utilisateur peut
valider ce dernier. Il arrive alors sur la page de paiement. Un fois le
paiement effecter, les films du caddie son ajouter aux films de l'utilisateur
et la transaction est enregistrer dans son historique.

Lors de la demande de la validation du caddie, l'utilisateur passe dans un
état spéciale: paiement. Cet état empèche la navigation sur le site, si une
page est accédé, alors le paiement est automatiquement annulé.


Cette fonctionnalité utilise un ManagedBean: PaiementManagedBean qui est en
RequestScoped. Ce managedBean utilise l'EJB ManagedTransaction. Une fois le
paiement fait, l'utilisateur et redirigé vers la page "mon compte".

-----------------------------------------
Voir l'historique des transactions
-----------------------------------------

L'utilisateur peut voir son historique des transactions  sur la page
moncompte.

Cette fonctionnnalité utilise HistoryManagedBean (RequestScoped) qui lui même
utilise l'EJB ManagedTransaction.
